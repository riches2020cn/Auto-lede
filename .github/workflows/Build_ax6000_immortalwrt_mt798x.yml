#=================================================
# Copyright (c) 2019-2023 sky2016cn
# Author: sky2016cn
# licensed under the MIT License
# See /LICENSE for more information
# Description: Build OpenWrt using GitHub Actions
#=================================================

name: Build_ax6000_immortalwrt_mt798x

# Add a button to trigger the workflow
on: 
  repository_dispatch:
  workflow_dispatch:

  #schedule:
    #- cron: 0 20 1,15 * *
    # 对应的是 UTC 时间，需要转换，20 代表北京时间4点，每个月1日/15日4点编译一次
    # schedule去＃号，- cron 对齐schedule的 h，开始定时编译，Actions会有十五分钟的延迟
    
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="
          
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
        /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE

    - name: Check Space
      run: |
        df -h

    - name: Clone source code
      env: 
        REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
      run: |
        git clone --depth=1 $REPO_URL immortalwrt || { echo 'Git clone failed!'; exit 1; }
        cd immortalwrt
                
    - name: Update feeds
      working-directory: ./immortalwrt
      run: |
        ./scripts/feeds update -a

    - name: Install feeds
      working-directory: ./immortalwrt
      run: |
        ./scripts/feeds install -a

    - name: Install feeds
      working-directory: ./immortalwrt
      run: |
        ./scripts/feeds install -a

    # msd_lite 必须放在feeds命令后，L大默认添加了 msd_lite，使用 msd_lite 收看 IPTV
    #- name: Import external feeds - msd_lite
    #  working-directory: ./immortalwrt
    #  run: |
    #    git clone https://github.com/ximiTech/luci-app-msd_lite.git package/luci-app-msd_lite
    #    rm -rf feeds/packages/net/msd_lite
    #    git clone https://github.com/ximiTech/msd_lite.git feeds/packages/net/msd_lite

    # 如果添加上方的 msd_lite，需要再次运行更新feeds命令    
    #- name: Update feeds
    #  working-directory: ./immortalwrt
    #  run: |
    #    ./scripts/feeds update -a
        
    #- name: Install feeds
    #  working-directory: ./immortalwrt
    #  run: |
    #    ./scripts/feeds install -a
        
    # 范例 1: 注意拉取命令的保存路径
    #- name: Import external feeds - OpenAppFilter
    #  working-directory: ./oimmortalwrt
    #  run: |
    #    git clone https://github.com/destan19/OpenAppFilter.git package/OpenAppFilter

    # 范例 2: argon皮肤必须放在feeds命令后，注意保存路径是feeds，替换原有的argon皮肤，如果Lean全部取消了argon皮肤，需要更改保存路径到package/luci-theme-argon
    #- name: Import external feeds - luci-theme-argon
    #  working-directory: ./immortalwrt
    #  run: |
    #    rm -rf feeds/luci/themes/luci-theme-argon
    #    git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git feeds/luci/themes/luci-theme-argon    


    
    - name: Configuration Customization - Build_ax6000_immortalwrt_mt798x
      env:
        CONFIG_FILE: 'ax6000_immortalwrt_mt798x.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE immortalwrt/.config
        chmod +x ./customize_immortalwrt.sh && ./customize_immortalwrt.sh
        cd immortalwrt && make defconfig
        
    - name: Download package
      working-directory: ./immortalwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./immortalwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) V=s

    - name: Check Space
      run: |
        df -h
        
    - name: Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: ax6000_immortalwrt_mt798x
        path: immortalwrt/bin
